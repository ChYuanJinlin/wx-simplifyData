{"version":3,"sources":["index.js","dist/wx-simplifyData.js","utils/index.js"],"names":[],"mappings":";;;;;;;AAAA;;;ACAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["module.exports = require('./dist/wx-simplifyData') ","var __TEMP__ = require('../utils/index');var getFunName = __TEMP__['getFunName'];\n\n\r\n// 数据成功变量标识，默认200\r\nlet statusCode = 200\r\nlet msgField = 'msg'\r\n// 状态成功返回的字段\r\nlet statusCodeText = 'status'\r\n// 获取数据字段的名称，默认data\r\nlet dataField = 'data'\r\n// 是否打印信息\r\nlet log = true\r\n// 获取函数名\r\nlet _funObj = {}\r\n// 保存_api对象\r\nlet _api = {}\r\n// 自定义提示\r\nlet toast = false\r\n// 初始化函数\r\n\r\n\r\n\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = (function (global, factory) {\r\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n    typeof define === 'function' && define.amd ? define(factory) : (global.Qarticles = factory());\r\n\r\n})(this, function () {\r\n\r\n\r\n  const _initData = (options = {}) => {\r\n    // 需要传一个配置对象  optios._api 必须传入其他可不传，采用默认配置\r\n    init(options)\r\n  }\r\n\r\n\r\n  const _$getData = function (apiMethodName, options = null, fn) {\r\n    _api[apiMethodName](options.apiData, options.name).then(res => {\r\n      if (log) {\r\n        console.table({\r\n          '接口返回打印信息': res,\r\n          '当前请求_api函数名': apiMethodName\r\n        })\r\n\r\n        console.table({\r\n          'wx-simplify打印信息': {\r\n            ...options,\r\n            statusCode: options.statusCode || statusCode,\r\n            msgField: options.msgField || msgField,\r\n            statusCodeText: options.statusCodeText || statusCodeText,\r\n            dataField: options.dataField || dataField\r\n          }\r\n        })\r\n\r\n      }\r\n      // 需要其他操作\r\n      fn && fn(res)\r\n      // 如果传的是函数，就自定义\r\n      if (typeof options != 'object') {\r\n        options && options.call(this, res)\r\n      } else {\r\n        // 如果是分页\r\n        if (options.type) {\r\n\r\n          if (options.setData == 'function') {\r\n            options.setData(res)\r\n          } else {\r\n            // 需要分页\r\n            wx.$ok.call(this, {\r\n              ...options,\r\n              // 是否需要分页 true 需要 false 不需要\r\n              type: options.type,\r\n              setData: {\r\n                [options.setData]: res[options.dataField || dataField]\r\n              },\r\n              dataField: options.dataField,\r\n              res,\r\n              pageData: {\r\n                [options.setData]: [...this.data[options.setData], ...res[options.dataField || dataField]]\r\n              }\r\n            }, options.success)\r\n\r\n          }\r\n\r\n\r\n        } else {\r\n          if (options.setData == 'function') {\r\n            options.setData(res)\r\n          } else {\r\n            wx.$ok.call(this, {\r\n              ...options,\r\n              setData: {\r\n                [options.setData]: res[options.dataField || dataField]\r\n              },\r\n              res,\r\n            }, options.success)\r\n          }\r\n\r\n\r\n        }\r\n      }\r\n\r\n    })\r\n      .catch(err => {\r\n        console.log('err--', err)\r\n        wx.showToast({\r\n          title: err[msgField],\r\n          icon: 'none',\r\n          duration: 2000\r\n\r\n        })\r\n      })\r\n\r\n  }\r\n  const $ok = function (data, fn) {\r\n    if (log) {\r\n      console.table({\r\n        '日志信息': data\r\n      })\r\n    }\r\n    // 不是分页\r\n    if (!data.type) {\r\n      if ((data.res[data.statusCodeText] || data.res[statusCodeText]) == (data.statusCode || statusCode)) {\r\n        if (fn) {\r\n          fn && fn.call(this, data.res)\r\n          return\r\n        }\r\n        data.setData && this.setData(data.setData)\r\n        //自定义\r\n        publicTips.call(this, data, 'complete')\r\n      } else {\r\n        publicTips.call(this, data, 'fail')\r\n      }\r\n\r\n    }\r\n    // 分页执行\r\n    if (data.type) {\r\n      if (((data.res[data.statusCodeText] || data.res[statusCodeText]) || data.res[statusCodeText]) == (data.statusCode || statusCode)) {\r\n        // 成功\r\n        if (fn) {\r\n          fn && fn.call(this, data.res)\r\n          return\r\n        }\r\n        // page = 1的时候执行\r\n        if (this.data.pages.page == 1) {\r\n          data.setData && this.setData(data.setData)\r\n        } else {\r\n\r\n          // page大于1时候执行\r\n          if (data.res[data.dataField || dataField].length) {\r\n            //完成\r\n            publicTips.call(this, data, 'complete')\r\n            data.pageData && this.setData(data.pageData)\r\n          } else {\r\n            // 没有数据\r\n            publicTips.call(this, data, 'noData')\r\n\r\n          }\r\n\r\n        }\r\n\r\n      } else {\r\n        // 失败\r\n        publicTips.call(this, data, 'fail')\r\n      }\r\n    }\r\n    wx.hideLoading()\r\n  }\r\n\r\n  function publicTips(data, name) {\r\n\r\n    if (typeof data[name] == 'function') {\r\n      data[name].call(this, data.res)\r\n      return\r\n    }\r\n\r\n    if (typeof data[name] == 'object') {\r\n      wx.showToast({\r\n        title: data.res[data.msgField || msgField],\r\n        icon: 'none',\r\n        duration: 2000,\r\n        ...data[name]\r\n      })\r\n      return\r\n    }\r\n\r\n    if (toast) {\r\n      wx.showToast(typeof toast == 'object' ? toast : {\r\n        title: data.res[data.msgField || msgField],\r\n        icon: 'none',\r\n        duration: 2000\r\n      })\r\n\r\n    }\r\n    if (data.toast) {\r\n      wx.showToast(typeof data.toast == 'object' ? data.toast : {\r\n        title: data.res[data.msgField || msgField],\r\n        icon: 'none',\r\n        duration: 2000\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  // 配置初始化参数\r\n  const init = function (options) {\r\n    statusCode = options.statusCode || 200\r\n    dataField = options.dataField || 'data'\r\n    statusCodeText = options.statusCodeText || 'status'\r\n    log = options.log || true\r\n    msgField = options.msgField || 'msg'\r\n    toast = options.toast || false\r\n    if (typeof options.api != 'object') {\r\n      throw new Error('错误,参数_api必须传入,并且是一个对象类型!')\r\n    }\r\n    for (const key in options.api) {\r\n      const fnName = getFunName(options.api[key])\r\n      _funObj[fnName] = fnName\r\n    }\r\n    // 把_api对象挂载到 wx 对象上\r\n    _api = options.api\r\n    // 把_api对象方法 挂载到wx 上，到时候可以wx.$am.你定义_api函数名\r\n    wx.$am = _funObj\r\n    wx.$getData = _$getData\r\n    wx.$ok = $ok\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  return {\r\n    init(opt) {\r\n      _initData(opt)\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n});","// 获取函数名字\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function getFunName(fn) {\r\n  var ret = fn.toString();\r\n  ret = ret.substr('function '.length);\r\n  ret = ret.substr(0, ret.indexOf('('));\r\n  return ret;\r\n};exports.getFunName = getFunName"]}